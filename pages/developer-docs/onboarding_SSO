
# Overview

This document is a technical support document to enable partners to:

* Define rights and permissions to registered users

* Revoke permissions assigned to registered users

* Update organization details

* Update user details

* Add users via signed token

DIKSHA platform allows signed on users on integrated systems to seamlessly navigate on DIKSHA. By design, the system is loose-coupled, and achieve the seamless navigation by sharing trusted login status. This keeps the technical complexity for integrating systems simple and the systems do not need to change their own sign-on protocols. 

The philosophy is built around a premise of trust between DIKSHA and integrated systems. When an authenticated user on integrated system navigates to DIKSHA, the integrated system redirects the browser and sends the details of the user to the portal. This data is signed using a private key of the sender, to allow DIKSHA to trust the incoming data and allow the user to sign in. This ensures that for integrating systems, the change is only how they redirect users to the portal, and not on their internal authentication implementation.

# Prerequisites 

Before beginning the tech integration, ensure the following:

* Partner is registered with DIKSHA

* Partner’s public key is shared with DIKSHA

* ‘iss’ is shared with partner

# Protocol

The authentication protocol provides: 

1. [A secure API endpoint to register new organisations](#heading=h.2jxsxqh)

2. [A secure API endpoint to register new users](#heading=h.1y810tw)

3. [A secure API endpoint to register users to organizations](#heading=h.2xcytpi)

4. [A secure API endpoint to de-register users from organizations](#heading=h.1ci93xb)

5. [A secure API endpoint to update user details](#heading=h.4i7ojhp)

6. [A secure API endpoint to update organisation details](#heading=h.z337ya)

7. [A secure API endpoint to auto-login a user into DIKSHA (Single-Sign-On)](#heading=h.3whwml4)

Please refer ‘[Organization and User APIs](#heading=h.44sinio)’ section for details of on APIs

# Tokens

JWT (pronounced "jot") is used in the protocol to generate signed tokens which can be verified by the Receiving Party (RP). A JWT is a signed token containing claims from the sender to the recipient. Because the token is signed by the sender, the recipient can be sure that the token has not been tampered. For a more detailed overview of JWTs see: [https://jwt.io/introduction/](https://jwt.io/introduction/)

JWTs are represented in JSON format. 

To authenticate with DIKSHA via SSO (Single Sign-on), a JWT provided to the auto-login endpoint must contain the following fields (also known as claims) in its payload. 

* jti: a unique id of the token, can be any string generated by the sender which is unique

* iss: the issuer of the JWT, this must be the id of the registered client 

* sub: the subject of the token, this must be the user id of the person who will be log in on DIKSHA

* aud: the consumer of the token, for now this is [https://www.ntp.in](https://www.ntp.in)

* nbf: not before, the earliest time when the token can be used (expressed as the number of seconds since epoch in GMT). The nbf time cannot be in the future

* exp: expires, the timestamp at which the token expires (expressed as the number of seconds since epoch in GMT). The exp time cannot be more than 600 seconds after the nbf time

* name: the name of the person whose user id is in sub

* email: the email of the person whose user id is in sub

* email_verified: whether the email id has been verified. Only Verified emails are accepted on DIKSHA 

* phone_number: 10-digit phone number of the person whose user id is in sub. This field is optional

* phone_number_verified: whether the phone number has been verified. Only Verified emails are accepted on DIKSHA. This field is optional

* redirect_uri: the url of the page where the user should be directed after login

## Example Payload for Single-Sign-On

{

  "jti": "261263cd-3a0e-4aee-8faf-6d9d9eb14bb1",

  "iss": "<replace with id provided by at registration time>",

  "sub": "someuserid",

  "aud": "<base_url>",

  "iat": 1498556656,

  "exp": 1498560256,

  "name": "Some User",

  "email": "some.user@gmail.com",

  "email_verified": true,

  "phone_number": "+91.9555-999-555",

  "phone_number_verified": true,

  "redirect_uri": "<base_url>/private/index#!/workspace/content/create"

}

## Base Url

The base url for NTP staging will be https://staging.ntp.net.in

The base url for NTP production will be https://diksha.gov.in

## Signature

The payload described must be signed before sending it the authentication endpoint. The JWT specification permits signing via HMAC, RSA or ECDSA algorithms. For this authentication end-point, the only permitted algorithm will be RSA signing via a private key. The corresponding public key will be provided during registration of the client. 

To read further on creating a RSA-signed JWT in Java see: [https://connect2id.com/products/nimbus-jose-jwt/examples/jwt-with-rsa-signature](https://connect2id.com/products/nimbus-jose-jwt/examples/jwt-with-rsa-signature))

# Procedure to Onboard Organizations

1. Generate RSA Private and Public Key Pair

2. Get Public Key registered in Production

3. Create Tenant Org

4. Create Organizations, Users and register

5. Single-Sign-On with DIKSHA

## Generating RSA Private and Public Key pair

To create a new pair of public/private keys, run the following command:

$ openssl genrsa -out private.pem 2048

This private key must be kept secret. To generate a public key corresponding to the private key, execute:

$ openssl rsa -in private.pem -outform PEM -pubout -out public.pem

If you run these commands, the public key will be written in public.pem, while the private key will be written in private.pem

## Accessing the APIs using token

The token generated should be sent in Authorization header of the request with value Bearer <token>. Example curl request

curl -H "Authorization: Bearer <token>" https://staging.ntp.net.in/api/echo/hello

## Onboarding New Tenant on DIKSHA

DIKSHA allows creation and configuration of multiple tenants in a single instance:

* Every tenant has a unique channel, i.e. all the activities by users belonging to that tenant are tagged by the tenant's channel id (activities include content creation, content consumption, etc)

* Tenants have the option to setup a custom home page and configure the logo to be displayed for users who belong to the tenant

* Tenants can create multiple sub organisations and add users to those organisations

Example: Each state is a tenant on DIKSHA and all schools/institutes in that state are created as sub-organisations under that tenant.

## Creating Tenant Organization

A tenant is nothing but a special type of organisation. Tenants can be created using the Create Organization API.

POST - <BASE_URL>/api/org/v1/create

Create a new organization

Request

* Request Body - organization details

{
  "request":{  
      "orgName": "name of the tenant organization", //required
      "description": "description", //optional
      "isRootOrg": true, //this should be set to true for tenant organisation
      "channel": "channel name of the partner, e.g.: ap", //required and must be unique across all tenants
      "description": "description", //optional
      "contactDetail": [ // required, contact details of the tenant contact person who can be contacted by users belonging to the tenant for any support. multiple contact details can be provided.
        {"phone": "xxxxxxxxxx", "email": "xxx@yyyy.domain"}
      ]
   }
}

*Note:*

* *channel value must be unique and must not contain any special characters and non-english characters.*

* *This channel value must be used as the provider while creating organizations and users for the tenants.*

Response

* orgId - Identifier of the created organization

{  
   "id":"api.org.create",
   "ver":"1.0",
   "ts":"YYYY-MM-DDThh:mm:ssZ+/-nn.nn",
   "params":{  
      "resmsgid":"",
      "msgid":"",
      "err":"0",
      "status":"SUCCESS",
      "errmsg":"Operation successful"
   },
   "result":{  
        "response": "SUCCESS",
        "orgId": "0122852840502968322"
   },
   "responseCode":"OK"
}

### Custom Homepage & logo for tenants

DIKSHA supports overriding of default home page and configuring a custom home page and logo for each on-boarded tenant. Tenant should provide package containing the following files for customising the home page and logo:

* The home page html file should be named index.html. All the dependent files (like js, css and images) used by the home page should be within the package and referred using relative paths from the "index.html".

* Logo of the tenant which should be with the name "logo.png"

* Optionally, tenants can also configure the following:

    * an icon (to be displayed as browser favicon) which should be named as "favicon.ico"

    * a poster image (to be used as flash screen in the mobile app) which should be named as "poster.png"

All the files should be placed in a folder. The folder name should be the same as the channel value of the tenant.

### Sign In link from Custom Home Page

Following link needs to be added at an appropriate place in the custom home page to invoke DIKSHA portal login:

<a href="/private/index" title="Sign In"><span>Sign In</span></a>

# API Information

## Organization APIs

Tenants can import their organizations and users on DIKSHA using the organization and user APIs. The API has the following resources:

* Create Organization

* Update Organization

* Create User

* Update User

* Add Member to Organization

* Remove Member from Organization

* Single-Sign-On API

### Create Organization

POST - <BASE_URL>/api/org/v1/create

Creates a new organization.

Request

* Request Body - organization details

{
  "request":{  
      "orgName": "name of the organization", //required
      "description": "description", //optional
      "externalId": "identifier of the organization in the partner system", // required
      "provider": "channel of the tenant to which the organization belongs to, e.g.: ap",   //required

      "homeUrl": Organization’s homepage url, //optional

"orgCode": Unique code for the organization that is being uploaded, //optional

"orgType": Type of organization, such as, NGO, primary school, secondary school etc., //optional

"preferredLanguage": Language preferences for the organization, if any, //optional

"contactDetail": [{ "email": "[diksha@diksha.com](mailto:diksha@talentsprint.com)",  "Phone": “1234567890” }] //optional
   }
}

District, Block and Cluster fields will be introduced shortly.

Response

* orgId - Identifier of the created organization

{  
   "id":"api.org.create",
   "ver":"1.0",
   "ts":"YYYY-MM-DDThh:mm:ssZ+/-nn.nn",
   "params":{  
      "resmsgid":"",
      "msgid":"",
      "err":"0",
      "status":"SUCCESS",
      "errmsg":"Operation successful"
   },
   "result":{  
        "response": "SUCCESS",
        "orgId": "0122852840502968322"
   },
   "responseCode":"OK"
}

### Update Organization

PATCH - <BASE_URL>/api/org/v1/update

Updates an existing organization.

Request

* Request Body - organization details

{
  "request":{  
      "externalId": "identifier of the organization in the partner system", // required
      "provider": "channel of the tenant to which the organization belongs to, e.g.: ap", //required
      "orgName": "name of the organization", //optional
      "description": "description", //optional
   }
}

Response

{  
   "id":"api.org.update",
   "ver":"1.0",
   "ts":"YYYY-MM-DDThh:mm:ssZ+/-nn.nn",
   "params":{  
      "resmsgid":"",
      "msgid":"",
      "err":"0",
      "status":"SUCCESS",
      "errmsg":"Operation successful"
   },
   "result":{  
        "response": "SUCCESS"
   },
   "responseCode":"OK"
}

## User APIs

### Create User

POST - <BASE_URL>/api/user/v1/create

Creates a new user

Request

* Request Body - user details

{
  "request":{  
      "firstName": "first name of the user", //required
      "lastName": "last name of the user", //optional
      "provider": "channel of the tenant to which the user belongs to, e.g.: ap", //required
      "email": "user.email@test.com", //required
      "emailVerified": true, //required
      "userName": "unique username for the user", //required
      "phone": "9900032121",
      "phoneVerified": true,
      "password": "password for the user to login into sunbird" //optional

      "roles": “roles to be associated with user. E.g.: CONTENT_CREATOR, CONTENT_REVIEWER, COURSE_MENTOR, FLAG_REVIEWER” //optional

 	"position": //optional

	"grade": Classes taught by the user //optional. Values - Class 1 to Class10, Kindergarten, Other

	"location": User’s place of location //optional

	"dob": User’s date of birth //optional. Format - YYYY-MM-DD

	"aadhaarNo": //optional

	"gender": //optional. Values - Male, Female, Transgender

	"language": User’s language preferences. //optional 

	"profileSummary": User’s profile summary //optional

	"subject": Taught by the user //optional. Values - Assamese, Bengali, English, Hindi, Kannada, Malayalam, Oriya, Punjabi, Tamil, Telugu, Urdu, Biology, Chemistry, Physics, Mathematics, Environmental Studies, Geography, History, Political Science, Economics, Sanskrit, Gujarati, Marathi, Nepali   

}

}

Response

* userId - Identifier of the created user

{  
   "id":"api.user.create",
   "ver":"1.0",
   "ts":"YYYY-MM-DDThh:mm:ssZ+/-nn.nn",
   "params":{  
      "resmsgid":"",
      "msgid":"",
      "err":"0",
      "status":"SUCCESS",
      "errmsg":"Operation successful"
   },
   "result":{  
        "response": "SUCCESS",
        "userId": "0122852840502968322"
   },
   "responseCode":"OK"
}

### Update User

POST - <BASE_URL>/api/user/v1/update

Updates an existing user. All optional fields mentioned in ‘Create User’ can be added in the ‘Update User’ request.

Request

* Request Body - user details

{
  "request":{
      "userName": "unique userName for the user", //required
      "provider": "channel of the tenant to which the user belongs to, e.g.: ap", //required
      "firstName": "first name of the user", //optional
      "lastName": "last name of the user", //optional
      "email": "user.email@test.com", //required
      "emailVerified": true, //required
      "phone": "9900032121",
      "phoneVerified": true
   }
}

Response

{  
   "id":"api.user.update",
   "ver":"1.0",
   "ts":"YYYY-MM-DDThh:mm:ssZ+/-nn.nn",
   "params":{  
      "resmsgid":"",
      "msgid":"",
      "err":"0",
      "status":"SUCCESS",
      "errmsg":"Operation successful"
   },
   "result":{  
        "response": "SUCCESS"
   },
   "responseCode":"OK"
}

### Add Member

POST - <BASE_URL>/api/org/v1/member/add

Adds a member to the organization

Request

* Request Body - membership details

{
  "request":{  
      "externalId": "identifier of the organization in the partner system", //required
      "provider": "channel of the tenant to which the organization belongs to, e.g.: ap", //required
      "userName": "username with which the user is created", // required
      "role": "member/content-creator/admin", //optional, default to member if not provided
      "position": "position of the person in the organisation, e.g.: Principal, Teacher, Student" // optional
   }
}

Response

{  
   "id":"api.org.member.add",
   "ver":"1.0",
   "ts":"YYYY-MM-DDThh:mm:ssZ+/-nn.nn",
   "params":{  
      "resmsgid":"",
      "msgid":"",
      "err":"0",
      "status":"SUCCESS",
      "errmsg":"Operation successful"
   },
   "result":{  
        "response": "SUCCESS"
   },
   "responseCode":"OK"
}

### Remove Member

POST - <BASE_URL>/api/org/v1/member/remove

Removes a member from an organization

Request

* Request Body - membership details

{
  "request":{  
      "externalId": "identifier of the organization in the partner system", //required
      "provider": "channel of the tenant to which the organization belongs to, e.g.: ap", //required
      "userName": "username with which the user is created", // required
   }
}

Response

{  
   "id":"api.org.member.remove",
   "ver":"1.0",
   "ts":"YYYY-MM-DDThh:mm:ssZ+/-nn.nn",
   "params":{  
      "resmsgid":"",
      "msgid":"",
      "err":"0",
      "status":"SUCCESS",
      "errmsg":"Operation successful"
   },
   "result":{  
        "response": "SUCCESS"
   },
   "responseCode":"OK"
}

## Single-Sign-On API

To login a user, the client must provide a link (which makes a GET request) to the auto-login endpoint /v1/user/session/create?token=<jwt_token> with the JWT token in the query parameter of the request. Here’s an example:

<base_url>/v1/user/session/create?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ

# Master Data Interchange

There are some data presently residing in the external SSO systems which are needed in Diksha to provide functionality to the users who sign in to the platform. The data needed are about organisations (teacher education/training Institutes) and the members of the organisations. Within Diksha, a user is not granted permissions system wide. Instead, a user has permissions defined at the level of the organisation which they are a part of. This allows a user to be a part of many organisations and have different permissions for each organisation.

For example:

* There are two users, Anita and Bishan. Anita is a student at Acme Institute for Teacher Education. Bishan is a Teacher at the same institute. 

* In Diksha, Anita and Bishan will have different levels of access to resources available within the Acme Institute. Anita will be a member and Bishan will be an organisation content creator.

* A third user, Chandra who is not registered as a member of the Acme Institute for Teacher Education will have no access to the resources of the Institute. 

* A fourth user, Deepti who is registered as an admin of the Acme Institute for Teacher Education will be able to administer the organisation and its resources.

## Data Requirements

To make this feasible, Diksha will require three items of information from the integrating party

1. List of organisations, their names and any unique identifier for them in external system

2. List of members for each organisation containing the username, full name and verified email address

3. List of roles of each member in the organisation. Available roles are member, content creator and admin.

# Common Errors and Solutions

<table>
  <tr>
    <td>Common Errors</td>
    <td>Cause</td>
    <td>Solutions</td>
  </tr>
  <tr>
    <td>Issue while generating JWT Token</td>
    <td>Private Key was generated with des3 algorithm</td>
    <td>Private Key should be generated without mentioning any algorithm</td>
  </tr>
  <tr>
    <td>Issue while creating bulk orgs - ‘API rate limit exceeded’
</td>
    <td>There is a limit on number of calls (1000) that can be made within one hour by using a single API key</td>
    <td>Development team can increase the limit when necessary</td>
  </tr>
</table>


