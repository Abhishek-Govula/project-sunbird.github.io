swagger: '2.0'
info:
  version: '1.0'
  title: Badging Framework
  description: Badger api list
host: sunbird.com
basePath: /v1/issuer
securityDefinitions:
  auth:
    type: oauth2
    flow: implicit
    authorizationUrl: 'https://dev.open-sunbird.org/api/v1/issuer'
    scopes: {}
    x-skip-client-authentication: false
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /create:
    post:
      summary: Create Issuer
      operationId: CreatePost
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - name: name
          in: formData
          required: true
          type: string
          description: ''
        - name: description
          in: formData
          required: true
          type: string
          description: ''
        - name: url
          in: formData
          required: true
          type: string
          description: ''
        - name: email
          in: formData
          required: true
          type: string
          description: ''
        - name: image
          in: formData
          required: false
          type: file
          format: file
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
        - name: Authorization
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/search:
    post:
      summary: List Badge Classes
      operationId: BadgeSearchPost
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/ListBadgeClassesrequest'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests:
        - request:
            method: POST
            uri: /badge/search
            headers:
              Content-Type: application/json
              x-authenticated-user-token: '{{user-token}}'
            body: >-
              {"request":{"filters":{"issuerList":[],"rootOrgId":"something","type":"user","subtype":"award","roles":[]}}}
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: List Badge Classes
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /list:
    get:
      summary: List Issuers
      operationId: ListGet
      produces:
        - application/json
      parameters:
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests:
        - request:
            method: GET
            uri: /list
            headers:
              Content-Type: application/json
              x-authenticated-user-token: '{{user-token}}'
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: List Issuers
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/read/{issuerId}':
    get:
      summary: Get Issuer by ID
      operationId: ReadByIssuerIdGet
      produces:
        - application/json
      parameters:
        - name: issuerId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
        - name: Authorization
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests:
        - request:
            method: GET
            uri: /read/
            headers:
              Content-Type: application/json
              x-authenticated-user-token: '{{user-token}}'
              Authorization: 'Bearer {{api-key}}'
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Get Issuer by ID
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/badge/read/{badgeId}':
    get:
      summary: Get Badge Class by ID
      operationId: BadgeReadByBadgeIdGet
      produces:
        - application/json
      parameters:
        - name: badgeId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
        - name: Authorization
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests:
        - request:
            method: GET
            uri: /badge/read/
            headers:
              Content-Type: application/json
              x-authenticated-user-token: '{{user-token}}'
              Authorization: 'Bearer {{api-key}}'
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Get Badge Class by ID
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/assertion/search:
    post:
      description: List of assertions
      summary: List Badge Assertions
      operationId: BadgeAssertionSearchPost
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/ListBadgeAssertionsrequest'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests:
        - request:
            method: POST
            uri: /badge/assertion/search
            headers:
              Content-Type: application/json
              x-authenticated-user-token: '{{user-token}}'
            body: >-
              {"request":{"filters":{"assertions":["5000f030-8626-4bc5-8f5e-0b86966efea8"]}}}
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: List Badge Assertions
          x-testDescription: List of assertions
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/assertion/create:
    post:
      summary: Create Badge Assertion
      operationId: BadgeAssertionCreatePost
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/CreateBadgeAssertionrequest'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
        - name: Authorization
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests:
        - request:
            method: POST
            uri: /badge/assertion/create
            headers:
              Content-Type: application/json
              x-authenticated-user-token: '{{user-token}}'
              Authorization: 'Bearer {{api-key}}'
            body: >-
              {"request":{"recipientId":"6fbd1dd5-418c-4cc5-834b-7e7413192f10","recipientType":"user","evidence":"https://sunbirddev.blob.core.windows.net/user/uploads/badges/bfd203a3c494170dd7de199a97e05486.png","issuerId":"swarn","badgeId":"something"}}
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Create Badge Assertion
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/delete/{issuerId}':
    delete:
      summary: Delete Issuer by ID
      operationId: DeleteByIssuerIdDelete
      produces:
        - application/json
      parameters:
        - name: issuerId
          in: path
          required: true
          type: string
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests:
        - request:
            method: DELETE
            uri: /delete/
            headers:
              x-authenticated-user-token: '{{user-token}}'
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Delete Issuer by ID
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/assertion/delete:
    delete:
      description: Revoke badges
      summary: Revoke Badge Assertion by ID
      operationId: BadgeAssertionDeleteDelete
      produces:
        - application/json
      parameters:
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/RevokeBadgeAssertionByIdrequest'
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests:
        - request:
            method: DELETE
            uri: /badge/assertion/delete
            headers:
              Content-Type: application/json
              x-authenticated-user-token: '{{user-token}}'
            body: >-
              {"request":{"assertionId":"5000f030-8626-4bc5-8f5e-0b86966efea8","recipientId":"6502112a-6dc9-446a-82bb-58a89d91b2953","recipientType":"user","revocationReason":"some
              reason"}}
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Revoke Badge Assertion by ID
          x-testDescription: Revoke badges
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/badge/delete/{badgeId}':
    delete:
      summary: Delete Badge Class
      operationId: BadgeDeleteByBadgeIdDelete
      produces:
        - application/json
      parameters:
        - name: badgeId
          in: path
          required: true
          type: string
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests:
        - request:
            method: DELETE
            uri: /badge/delete/
            headers:
              x-authenticated-user-token: '{{access_token}}'
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Delete Badge Class
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/create:
    post:
      summary: Create Badge Class
      operationId: BadgeCreatePost
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - name: issuerId
          in: formData
          required: true
          type: string
          description: ''
        - name: name
          in: formData
          required: true
          type: string
          description: ''
        - name: description
          in: formData
          required: true
          type: string
          description: ''
        - name: criteria
          in: formData
          required: true
          type: string
          description: ''
        - name: rootOrgId
          in: formData
          required: true
          type: string
          description: ''
        - name: type
          in: formData
          required: true
          type: string
          description: ''
        - name: subtype
          in: formData
          required: true
          type: string
          description: ''
        - name: roles
          in: formData
          required: true
          type: string
          description: ''
        - name: image
          in: formData
          required: true
          type: file
          format: file
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  '/badge/assertion/read/{assertionId}':
    get:
      description: |-
        Generated from a curl request: 
        curl -X POST \
          {{baseURL}}}/v1/issuer/badge/assertion/read \
          -H 'authorization: Bearer {{api-key}}' \
          -H 'cache-control: no-cache' \
          -H 'content-type: application/json' \
          -H 'postman-token: 6721c4d2-6d49-5d49-ccc1-5f78eb4d70c4' \
          -H 'ts: 2017-05-25 10:18:56:578+0530' \
          -H 'x-authenticated-user-token: {{user-token}}' \
          -H 'x-consumer-id: X-Consumer-ID' \
          -H 'x-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf' \
          -d '  {
          \"request\": {
             \"assertionId\":\"779d42c0-0dbd-4e8c-850d-537538093d95\",
             \"issuerId\":\"haque\",
             \"badgeId\":\"db-design-expert\"
           }
          } 
        '
      summary: Get Badge Assertion by ID
      operationId: BadgeAssertionReadByAssertionIdGet
      produces:
        - application/json
      parameters:
        - name: assertionId
          in: path
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
        - name: x-authenticated-user-token
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - auth: []
      x-unitTests:
        - request:
            method: GET
            uri: /badge/assertion/read/
            headers:
              Content-Type: application/json
              x-authenticated-user-token: '{{user-token}}'
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: Get Badge Assertion by ID
          x-testDescription: |-
            Generated from a curl request: 
            curl -X POST \
              {{baseURL}}}/v1/issuer/badge/assertion/read \
              -H 'authorization: Bearer {{api-key}}' \
              -H 'cache-control: no-cache' \
              -H 'content-type: application/json' \
              -H 'postman-token: 6721c4d2-6d49-5d49-ccc1-5f78eb4d70c4' \
              -H 'ts: 2017-05-25 10:18:56:578+0530' \
              -H 'x-authenticated-user-token: {{user_token}}' \
              -H 'x-consumer-id: X-Consumer-ID' \
              -H 'x-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf' \
              -d '  {
              \"request\": {
                 \"assertionId\":\"779d42c0-0dbd-4e8c-850d-537538093d95\",
                 \"issuerId\":\"haque\",
                 \"badgeId\":\"db-design-expert\"
               }
              } 
            '
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  ListBadgeClassesrequest:
    title: List Badge ClassesRequest
    example:
      request:
        filters:
          issuerList: []
          rootOrgId: something
          type: user
          subtype: award
          roles: []
    type: object
    properties:
      request:
        $ref: '#/definitions/Request'
    required:
      - request
  Request:
    title: Request
    example:
      filters:
        issuerList: []
        rootOrgId: something
        type: user
        subtype: award
        roles: []
    type: object
    properties:
      filters:
        $ref: '#/definitions/Filters'
    required:
      - filters
  Filters:
    title: Filters
    example:
      issuerList: []
      rootOrgId: something
      type: user
      subtype: award
      roles: []
    type: object
    properties:
      issuerList:
        description: ''
        example: []
        type: array
        items:
          type: string
      rootOrgId:
        description: ''
        example: something
        type: string
      type:
        description: ''
        example: user
        type: string
      subtype:
        description: ''
        example: award
        type: string
      roles:
        description: ''
        example: []
        type: array
        items:
          type: string
    required:
      - issuerList
      - rootOrgId
      - type
      - subtype
      - roles
  ListBadgeAssertionsrequest:
    title: List Badge AssertionsRequest
    example:
      request:
        filters:
          assertions:
            - 5000f030-8626-4bc5-8f5e-0b86966efea8
    type: object
    properties:
      request:
        $ref: '#/definitions/Request4'
    required:
      - request
  Request4:
    title: Request4
    example:
      filters:
        assertions:
          - 5000f030-8626-4bc5-8f5e-0b86966efea8
    type: object
    properties:
      filters:
        $ref: '#/definitions/Filters5'
    required:
      - filters
  Filters5:
    title: Filters5
    example:
      assertions:
        - 5000f030-8626-4bc5-8f5e-0b86966efea8
    type: object
    properties:
      assertions:
        description: ''
        example:
          - 5000f030-8626-4bc5-8f5e-0b86966efea8
        type: array
        items:
          type: string
    required:
      - assertions
  CreateBadgeAssertionrequest:
    title: Create Badge AssertionRequest
    example:
      request:
        recipientId: 6fbd1dd5-418c-4cc5-834b-7e7413192f10
        recipientType: user
        evidence: >-
          https://sunbirddev.blob.core.windows.net/user/uploads/badges/bfd203a3c494170dd7de199a97e05486.png
        issuerId: swarn
        badgeId: something
    type: object
    properties:
      request:
        $ref: '#/definitions/Request7'
    required:
      - request
  Request7:
    title: Request7
    example:
      recipientId: 6fbd1dd5-418c-4cc5-834b-7e7413192f10
      recipientType: user
      evidence: >-
        https://sunbirddev.blob.core.windows.net/user/uploads/badges/bfd203a3c494170dd7de199a97e05486.png
      issuerId: swarn
      badgeId: something
    type: object
    properties:
      recipientId:
        description: ''
        example: 6fbd1dd5-418c-4cc5-834b-7e7413192f10
        type: string
      recipientType:
        description: ''
        example: user
        type: string
      evidence:
        description: ''
        example: >-
          https://sunbirddev.blob.core.windows.net/user/uploads/badges/bfd203a3c494170dd7de199a97e05486.png
        type: string
      issuerId:
        description: ''
        example: swarn
        type: string
      badgeId:
        description: ''
        example: something
        type: string
    required:
      - recipientId
      - recipientType
      - evidence
      - issuerId
      - badgeId
  RevokeBadgeAssertionByIdrequest:
    title: Revoke Badge Assertion by IDRequest
    example:
      request:
        assertionId: 5000f030-8626-4bc5-8f5e-0b86966efea8
        recipientId: 6502112a-6dc9-446a-82bb-58a89d91b2953
        recipientType: user
        revocationReason: some reason
    type: object
    properties:
      request:
        $ref: '#/definitions/Request9'
    required:
      - request
  Request9:
    title: Request9
    example:
      assertionId: 5000f030-8626-4bc5-8f5e-0b86966efea8
      recipientId: 6502112a-6dc9-446a-82bb-58a89d91b2953
      recipientType: user
      revocationReason: some reason
    type: object
    properties:
      assertionId:
        description: ''
        example: 5000f030-8626-4bc5-8f5e-0b86966efea8
        type: string
      recipientId:
        description: ''
        example: 6502112a-6dc9-446a-82bb-58a89d91b2953
        type: string
      recipientType:
        description: ''
        example: user
        type: string
      revocationReason:
        description: ''
        example: some reason
        type: string
    required:
      - assertionId
      - recipientId
      - recipientType
      - revocationReason
